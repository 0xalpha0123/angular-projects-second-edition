import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { TestBed } from '@angular/core/testing';

import { <%= classify(name) %>Service } from './<%= dasherize(name) %>.service';

describe(<%= classify(name) %>Service.name, () => {
  let service: <%= classify(name) %>Service;
  let httpTestingController: HttpTestingController;
  const url = '/api';
  const obj = { name: 'fakeName' };

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers: [<%= classify(name) %>Service]
    });
    
    service = TestBed.inject(<%= classify(name) %>Service);
    httpTestingController = TestBed.inject(HttpTestingController);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  it('should make a create request', () => {
    service.create(obj).subscribe();
    const req = httpTestingController.expectOne(url);
    expect(req.request.method).toEqual('POST');
    expect(req.request.body).toEqual(obj);
  });

  it('should make a read request', () => {
    service.read().subscribe();
    const req = httpTestingController.expectOne(url);
    expect(req.request.method).toEqual('GET');
  });

  it('should make an update request', () => {
    service.update(obj).subscribe();
    const req = httpTestingController.expectOne(url);
    expect(req.request.method).toEqual('PUT');
    expect(req.request.body).toEqual(obj);
  });

  it('should make a delete request', () => {
    service.delete(obj.name).subscribe();
    const req = httpTestingController.expectOne(url + obj.name);
    expect(req.request.method).toEqual('DELETE');
  });
});